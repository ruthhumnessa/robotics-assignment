// Generated by gencpp from file arm_gazebo/ModelJoints.msg
// DO NOT EDIT!


#ifndef ARM_GAZEBO_MESSAGE_MODELJOINTS_H
#define ARM_GAZEBO_MESSAGE_MODELJOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_gazebo
{
template <class ContainerAllocator>
struct ModelJoints_
{
  typedef ModelJoints_<ContainerAllocator> Type;

  ModelJoints_()
    : jointOneAngle(0.0)
    , jointTwoAngle(0.0)
    , jointThreeAngle(0.0)
    , jointFourAngle(0.0)  {
    }
  ModelJoints_(const ContainerAllocator& _alloc)
    : jointOneAngle(0.0)
    , jointTwoAngle(0.0)
    , jointThreeAngle(0.0)
    , jointFourAngle(0.0)  {
  (void)_alloc;
    }



   typedef double _jointOneAngle_type;
  _jointOneAngle_type jointOneAngle;

   typedef double _jointTwoAngle_type;
  _jointTwoAngle_type jointTwoAngle;

   typedef double _jointThreeAngle_type;
  _jointThreeAngle_type jointThreeAngle;

   typedef double _jointFourAngle_type;
  _jointFourAngle_type jointFourAngle;





  typedef boost::shared_ptr< ::arm_gazebo::ModelJoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_gazebo::ModelJoints_<ContainerAllocator> const> ConstPtr;

}; // struct ModelJoints_

typedef ::arm_gazebo::ModelJoints_<std::allocator<void> > ModelJoints;

typedef boost::shared_ptr< ::arm_gazebo::ModelJoints > ModelJointsPtr;
typedef boost::shared_ptr< ::arm_gazebo::ModelJoints const> ModelJointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_gazebo::ModelJoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_gazebo::ModelJoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_gazebo::ModelJoints_<ContainerAllocator1> & lhs, const ::arm_gazebo::ModelJoints_<ContainerAllocator2> & rhs)
{
  return lhs.jointOneAngle == rhs.jointOneAngle &&
    lhs.jointTwoAngle == rhs.jointTwoAngle &&
    lhs.jointThreeAngle == rhs.jointThreeAngle &&
    lhs.jointFourAngle == rhs.jointFourAngle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_gazebo::ModelJoints_<ContainerAllocator1> & lhs, const ::arm_gazebo::ModelJoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_gazebo::ModelJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_gazebo::ModelJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_gazebo::ModelJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_gazebo::ModelJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_gazebo::ModelJoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_gazebo::ModelJoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_gazebo::ModelJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b58cc9c6acfc74729d0ca9f99d93c5a";
  }

  static const char* value(const ::arm_gazebo::ModelJoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b58cc9c6acfc747ULL;
  static const uint64_t static_value2 = 0x29d0ca9f99d93c5aULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_gazebo::ModelJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_gazebo/ModelJoints";
  }

  static const char* value(const ::arm_gazebo::ModelJoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_gazebo::ModelJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 jointOneAngle\n"
"float64 jointTwoAngle\n"
"float64 jointThreeAngle\n"
"float64 jointFourAngle\n"
;
  }

  static const char* value(const ::arm_gazebo::ModelJoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_gazebo::ModelJoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jointOneAngle);
      stream.next(m.jointTwoAngle);
      stream.next(m.jointThreeAngle);
      stream.next(m.jointFourAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModelJoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_gazebo::ModelJoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_gazebo::ModelJoints_<ContainerAllocator>& v)
  {
    s << indent << "jointOneAngle: ";
    Printer<double>::stream(s, indent + "  ", v.jointOneAngle);
    s << indent << "jointTwoAngle: ";
    Printer<double>::stream(s, indent + "  ", v.jointTwoAngle);
    s << indent << "jointThreeAngle: ";
    Printer<double>::stream(s, indent + "  ", v.jointThreeAngle);
    s << indent << "jointFourAngle: ";
    Printer<double>::stream(s, indent + "  ", v.jointFourAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_GAZEBO_MESSAGE_MODELJOINTS_H
