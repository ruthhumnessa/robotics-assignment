// Generated by gencpp from file my_pkg/pos.msg
// DO NOT EDIT!


#ifndef MY_PKG_MESSAGE_POS_H
#define MY_PKG_MESSAGE_POS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_pkg
{
template <class ContainerAllocator>
struct pos_
{
  typedef pos_<ContainerAllocator> Type;

  pos_()
    : vector()
    , angles()
    , distance(0.0)  {
      vector.assign(0.0);

      angles.assign(0.0);
  }
  pos_(const ContainerAllocator& _alloc)
    : vector()
    , angles()
    , distance(0.0)  {
  (void)_alloc;
      vector.assign(0.0);

      angles.assign(0.0);
  }



   typedef boost::array<float, 3>  _vector_type;
  _vector_type vector;

   typedef boost::array<float, 3>  _angles_type;
  _angles_type angles;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::my_pkg::pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_pkg::pos_<ContainerAllocator> const> ConstPtr;

}; // struct pos_

typedef ::my_pkg::pos_<std::allocator<void> > pos;

typedef boost::shared_ptr< ::my_pkg::pos > posPtr;
typedef boost::shared_ptr< ::my_pkg::pos const> posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_pkg::pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_pkg::pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_pkg::pos_<ContainerAllocator1> & lhs, const ::my_pkg::pos_<ContainerAllocator2> & rhs)
{
  return lhs.vector == rhs.vector &&
    lhs.angles == rhs.angles &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_pkg::pos_<ContainerAllocator1> & lhs, const ::my_pkg::pos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_pkg::pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_pkg::pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_pkg::pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_pkg::pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_pkg::pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_pkg::pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_pkg::pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "565cbe9982662021a725abd3ca8aed38";
  }

  static const char* value(const ::my_pkg::pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x565cbe9982662021ULL;
  static const uint64_t static_value2 = 0xa725abd3ca8aed38ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_pkg::pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_pkg/pos";
  }

  static const char* value(const ::my_pkg::pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_pkg::pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] vector\n"
"float32[3] angles\n"
"float32 distance\n"
;
  }

  static const char* value(const ::my_pkg::pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_pkg::pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vector);
      stream.next(m.angles);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_pkg::pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_pkg::pos_<ContainerAllocator>& v)
  {
    s << indent << "vector[]" << std::endl;
    for (size_t i = 0; i < v.vector.size(); ++i)
    {
      s << indent << "  vector[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vector[i]);
    }
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PKG_MESSAGE_POS_H
